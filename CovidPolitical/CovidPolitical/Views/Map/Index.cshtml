@{
    ViewData["Title"] = "Covid Political";
}

<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
    <link rel="shortcut icon" href="">
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <script src="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js"></script>
    <link href="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css" rel="stylesheet" />
    <style>
        body {
            margin: 0;
            padding: 0;
        }

        #map {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 100%;
        }

        #menu {
            background: #fff;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
            border-radius: 3px;
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 20px 20px 10px 20px;
            font-family: 'Open Sans', sans-serif;
        }

        .map-overlay {
            font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;
            background-color: #fff;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
            border-radius: 3px;
            position: absolute;
            top: 10px;
            left: 10px;
            padding: 10px 20px;
            display: none;
        }
    </style>
</head>

<body>
    <div id="map"></div>

    <div id="map-overlay" class="map-overlay">
        <div id="county-text" class="font-weight-bold"></div>
        <div id="fips-text"></div>
        <div id="dem-percent-text"></div>
        <div id="gop-percent-text"></div>
        <div id="population-text"></div>
        <div id="confirmed-text"></div>
        <div id="active-text"></div>
        <div id="deaths-text"></div>
    </div>

    <div id="menu">
        <input id="confirmed" type="radio" name="rcovid" value="confirmed" checked="checked" />
        <label for="confirmed">Confirmed</label>
        <input id="deaths" type="radio" name="rcovid" value="deaths" />
        <label for="deaths">Deaths</label>
        <input id="active" type="radio" name="rcovid" value="active" />
        <label for="active">Active</label>
        <hr class="mt-0 mb-2" />
        <input id="actual" type="radio" name="rfilter" value="actual" checked="checked" />
        <label for="actual">Actual</label>
        <input id="per100k" type="radio" name="rfilter" value="per100k" />
        <label for="per100k">Per 100k</label>
    </div>

    <script>

        mapboxgl.accessToken = 'pk.eyJ1IjoicnlhbnRpbW90aHkiLCJhIjoiY2tlNXN5bjRrMGJ6NjJybjVpenJlODZ1NiJ9.6YxFfsow9guHOa4PzBnN_A';

        var map = new mapboxgl.Map({
            'container': 'map',
            'style': 'mapbox://styles/mapbox/dark-v10',
            'center': [-98, 38.88],
            'minZoom': 2,
            'zoom': 4
        });

        var overlay = document.getElementById('map-overlay');
        var overlayCountyText = document.getElementById('county-text');
        var overlayPopulationText = document.getElementById('population-text');
        var overlayFipsText = document.getElementById('fips-text');
        var overlayDemPercentageText = document.getElementById('dem-percent-text');
        var overlayGopPercentageText = document.getElementById('gop-percent-text');
        var overlayConfirmedText = document.getElementById('confirmed-text');
        var overlayActiveText = document.getElementById('active-text');
        var overlayDeathsText = document.getElementById('deaths-text');

        // Create a popup, but don't add it to the map yet.
        var popup = new mapboxgl.Popup({
            closeButton: false
        });

        var covidInputs = document.getElementsByName('rcovid');
        var filterInputs = document.getElementsByName('rfilter');

        var expressionValues = {
            'actual': {
                'confirmed': 'confirmed',
                'deaths': 'deaths',
                'active': 'active',
            },
            'per100k': {
                'confirmed': 'confirmedPer100k',
                'deaths': 'deathsPer100k',
                'active': 'activePer100k',
            },
        }

        for (var i = 0; i < covidInputs.length; i++) {
            covidInputs[i].onclick = covidOnClick;
        }

        for (var i = 0; i < filterInputs.length; i++) {
            filterInputs[i].onclick = filterOnClick;
        }

        function covidOnClick(covid) {
            setCovidPointFeatureValue(covid.target.value, document.querySelector('input[name="rfilter"]:checked').value);
        }

        function filterOnClick(filter) {
            setCovidPointFeatureValue(document.querySelector('input[name="rcovid"]:checked').value, filter.target.value);
        }

        function setCovidPointFeatureValue(covid, filter) {
            let expressionValue = expressionValues[filter][covid]

            map.setPaintProperty('covid-point', 'circle-radius',
                [
                    'interpolate',
                    ['linear'],
                    ['zoom'],
                    3,
                    ['interpolate',
                        ['linear'],
                        ['get', expressionValue],
                        1750, 0.1,
                        25000, 8],
                    30,
                    ['interpolate',
                        ['linear'],
                        ['get', expressionValue],
                        1750, 40,
                        25000, 150]
                ]);

            map.setPaintProperty('covid-point', 'circle-color',
                [
                    'interpolate',
                    ['linear'],
                    ['get', expressionValue],
                    1750,
                    'rgba(239, 232, 120,0)',
                    7000,
                    '#feffd9',
                    30000,
                    '#ffffff'
                ]);

            map.setPaintProperty('covid-point', 'circle-stroke-color',
                [
                    'interpolate',
                    ['linear'],
                    ['get', expressionValue],
                    0.0,
                    'transparent',
                    10000,
                    'white',
                    23000,
                    'black'
                ]);
        }

        map.on('load', async function () {
            // source: US counties for political fill & border around county
            map.addSource('counties-source', {
                'type': 'vector',
                'url': 'mapbox://mapbox.82pkq93d',
                'promoteId': { 'original': 'FIPS' },
            });

            // source: US state for border around state
            map.addSource('states-source', {
                'type': 'geojson',
                'data':
                    'https://docs.mapbox.com/mapbox-gl-js/assets/us_states.geojson'
            });

            // county border & fill color by political percentage
            map.addLayer(
                {
                    'id': 'counties-layer',
                    'type': 'fill',
                    'source': 'counties-source',
                    'source-layer': 'original',
                    'paint': {
                        'fill-outline-color': '#666666',
                        'fill-color': [
                            'case',
                            ['>',
                                ['feature-state', 'DemPercentage'],
                                ['feature-state', 'GopPercentage']],
                            // democrat county
                            ['interpolate',
                                ['linear'],
                                ['-', ['feature-state', 'DemPercentage'], ['feature-state', 'GopPercentage']],
                                0, 'white',
                                0.3, 'blue'],
                            // republican county
                            ['interpolate',
                                ['linear'],
                                ['-', ['feature-state', 'GopPercentage'], ['feature-state', 'DemPercentage']],
                                0, 'white',
                                0.3, 'red'],
                        ],
                        'fill-opacity': 0.5
                    },
                }
            );

            // state border
            map.addLayer(
                {
                    'id': 'state-borders',
                    'type': 'line',
                    'source': 'states-source',
                    'layout': {},
                    'paint': {
                        'line-color': '#cdcdcd',
                        'line-width': 1
                    }
                },
                'waterway-label'
            );

            map.addLayer(
                {
                    'id': 'counties-highlighted',
                    'type': 'fill',
                    'source': 'counties-source',
                    'source-layer': 'original',
                    'paint': {
                        'fill-outline-color': '#484896',
                        'fill-color': '#6e599f',
                        'fill-opacity': 0.75
                    },
                    'filter': ['in', 'COUNTY', '']
                },
                'settlement-label'
            ); // Place polygon under these labels.

            // fetch election results - static file
            await fetch('/Data/2016_election_us_counties.json')
                .then(response => response.text())
                .then((data) => {
                    let electionjson = JSON.parse(data);

                    // set for political Democrat/Republican vote percentages
                    electionjson.forEach((item) => {
                        map.setFeatureState(
                            {
                                'source': 'counties-source',
                                'sourceLayer': 'original',
                                'id': item.FIPS,
                            },
                            {
                                'DemPercentage': item.DemPercentage,
                                'GopPercentage': item.GopPercentage,
                            }
                        );
                    });
                });

            let covidResponse = await fetch('api/covid');

            let covidData = await (
                covidResponse.headers.get('content-type').includes('json') ? covidResponse.json() : covidResponse.text()
            );

            // source: covid data for circle at geometry point
            map.addSource('covid-source', {
                'type': 'geojson',
                'data':
                    covidData
            });

            // covid circle
            map.addLayer(
                {
                    'id': 'covid-point',
                    'type': 'circle',
                    'source': 'covid-source',
                    'paint': {
                        'circle-stroke-width': 1,
                    }
                });

            setCovidPointFeatureValue(document.querySelector('input[name="rcovid"]:checked').value, document.querySelector('input[name="rfilter"]:checked').value);

            map.on('mousemove', 'counties-layer', function (e) {
                // Change the cursor style as a UI indicator.
                map.getCanvas().style.cursor = 'pointer';

                // Single out the first found feature.
                let feature = e.features[0];

                // get political feature-state
                let featureState = map.getFeatureState(
                    {
                        'source': 'counties-source',
                        'sourceLayer': 'original',
                        'id': parseInt(feature.properties.FIPS),
                    });

                // county info
                overlayCountyText.textContent = feature.properties.COUNTY;
                overlayFipsText.textContent = 'FIPS: ' + feature.properties.FIPS.toString();
                // political
                overlayDemPercentageText.textContent = 'Dem: ' + (featureState.DemPercentage * 100).toFixed(1) + '%';
                overlayGopPercentageText.textContent = 'GOP: ' + (featureState.GopPercentage * 100).toFixed(1) + '%';
                // population
                overlayPopulationText.textContent = 'Total population: ' + feature.properties.population?.toLocaleString();
                // covid
                for (var i = 0; i < covidData.features.length; i++) {
                    if (covidData.features[i].properties.fips == feature.properties.FIPS) {
                        overlayConfirmedText.textContent = 'Confirmed Cases: ' + covidData.features[i].properties.confirmed?.toLocaleString();
                        overlayActiveText.textContent = 'Active Cases: ' + covidData.features[i].properties.active?.toLocaleString();
                        overlayDeathsText.textContent = 'Total Deaths: ' + covidData.features[i].properties.deaths?.toLocaleString();
                        break;
                    }
                }

                overlay.style.display = 'block';

                // Add features that share the same county name to the highlighted layer.
                map.setFilter('counties-highlighted',
                    ['in', 'FIPS', feature.properties.FIPS]);

                // Display a popup with the name of the county
                popup
                    .setLngLat(e.lngLat)
                    .setText(feature.properties.COUNTY)
                    .addTo(map);
            });

            map.on('mouseleave', 'counties-layer', function () {
                map.getCanvas().style.cursor = '';
                popup.remove();
                map.setFilter('counties-highlighted', ['in', 'COUNTY', '']);
                overlay.style.display = 'none';
            });
        });
    </script>
</body>
</html>